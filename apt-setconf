#!/usr/bin/python3 -S
"""A script to enforce debconf settings"""

import argparse
import collections
import os
import re
import subprocess
import sys


def ignore(*args, **kwargs):
    pass

def printerr(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def fatal(msg, status=2):
    printerr(msg)
    sys.exit(status)

try:
    assert False
except AssertionError:
    pass
else:
    fatal('Assertions must be enabled')

debug = ignore

DebconfSelection = collections.namedtuple(
    'DebconfSelection', 'pkg prefix suffix type value')
DC_RE = re.compile(r'^(\S+)\s+([^/]+)/(\S+)\s+(\S+)(?:\s+(\S+))?$')
DC_BORING_RE = re.compile(r'^(#.*)?$')

BinPkg = collections.namedtuple(
    'BinPkg', 'pkg binpkg want eflag status')

parser = argparse.ArgumentParser()
args = parser.parse_args()

sels = set()
pkgs = set()

proc = subprocess.Popen(['debconf-set-selections'], stdin=subprocess.PIPE, universal_newlines=True)

for line in sys.stdin:
    if DC_BORING_RE.match(line):
        continue
    fields = DC_RE.match(line).groups()
    dcs = DebconfSelection(*fields)
    proc.stdin.write(line)
    if dcs.type in {'note', 'seen'}:
        continue
    sels.add(dcs)
    pkgs.add(dcs.pkg)
proc.stdin.close()
proc.wait()
assert proc.returncode == 0, proc.returncode

if not pkgs:
    fatal('No packages given', status=0)

installed = set()
needinstall = set(pkgs)

proc = subprocess.Popen([
    'dpkg-query', '-Wf=${Package} ${binary:Package} ${Status}\n',
    '--'] + list(pkgs), stdout=subprocess.PIPE, universal_newlines=True)
for line in proc.stdout:
    fields = line.split()
    bpkg = BinPkg(*fields)
    if bpkg.eflag != 'ok':
        fatal('Package {} is broken'.format(bpkg.binpkg))
    if bpkg.status in {'not-installed', 'config-files'}:
        # Also track want:hold?
        continue
    if bpkg.status == 'installed':
        installed.add(bpkg.binpkg)
        needinstall.discard(bpkg.pkg)
        needinstall.discard(bpkg.binpkg)
    else:
        fatal('Package {} is in an unexpected state, {}'
              .format(bpkg.binpkg, bpkg.state))
proc.wait()
assert proc.returncode == 0, proc.returncode

debug('Will install {} packages and reconfigure {} others'
         .format(len(needinstall), len(installed)))

os.environ['DEBIAN_FRONTEND'] = 'noninteractive'

if needinstall:
    subprocess.check_call(
        'apt-get install --'.split() + list(needinstall))

if installed:
    subprocess.check_call(
        'dpkg-reconfigure --'.split() + list(installed))

